classdef (Abstract) adaptive < handle & matlab.mixin.Copyable
    % Adaptive parameter class.
    %
    %  This abstract class handles most of the behind the scenes work for adaptive parameters.
    % The details of the actual adaptation are in the derived classes
    % (questParm, staircaseParm).
    % 
    % As this is an abstract class, derived classes must define
    % both a getValue(s) function, which returns the current 
    % value of the parameter, and an update() function that 
    % updates the internal state of the adaptive method.
    % 
    % BK - 11/2016
   
    properties (SetAccess=protected, GetAccess=public)
        cic; 
        result@char;    % The function used to evaluate trial outcome. Specified by the user.
        resultFun@function_handle;  % The function handle used to evaluate trial outcome
        condition@char; % The condition that this adaptive parameter belongs to. Will be set by factorial.m
    end

    methods (Abstract)
            % update(s) should change the internal state of the adaptive object using the outcome of the current
            % trial (result = TRUE/Correct or FALSE/Incorrect).
            update(s,result); 
            % getValue returns the current parameter value.
            v= getValue(s);
    end
    
    methods
        function s = adaptive(c,funStr)
            % c= handle to CIC
            % fun = function string that evaluates to the outcome of the
            % trial (correct/incorrect).
            s.cic = c;
            s.result = funStr;            
            s.resultFun =neurostim.utils.str2fun(s.result); % Store as function_handle too
        end
        
        function S= repmat(s,n,m)
            % Duplicate the adaptive object. Need to define this because it
            % is a handle, and we really need copies, not copies of the
            % handles. (See factorial.m)
            for i=1:n
                for j=1:m
                    S(i,j) = copy(s) ; %#ok<AGROW>
                end
            end
        end
        
        
        function listenTo(s,conditionName)
            % Once an adaptive object is assigned to a specific condition (in factorial.m),
            % we set it up to listen to afterTrial events and act only on
            % those events that are generated by the corresponding
            % conditionName
            s.condition = conditionName;
            addlistener(s.cic,'BASEAFTERTRIAL',@(~,evt)(afterTrial(s,evt)));            
        end
        
        function afterTrial(s,evt)
            % This is called after cic sends the BASEAFTERTRIAL event
            % (in cic.run)
            if strcmpi(evt.conditionName,s.condition)
                % Only update if this adaptive object is assigned to the
                % current condition. Call the derived class function to update it
               correct = s.resultFun(s); % Evaluate the result function that the user provided. 
               update(s,correct); % Pass it to the derived class to update
            end            
        end      
    end
end % classdef
